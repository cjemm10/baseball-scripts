theta_1_values <- replicate(B,
{
samp <- rgamma(10, shape = 2, rate = .5)
theta_1(samp)
}
)
theta_2_values <- replicate(B,
{
samp <- rgamma(10, shape = 2, rate = .5)
theta_2(samp)
}
)
bias_theta_1 <- abs(mean(theta_1_values) - sig^2)
bias_theta_2 <- abs(mean(theta_2_values) - sig^2)
bias_theta_1 #bias for theta_1
bias_theta_2 #bias for theta_2
B <- 100000
sig <- 1.6
theta_1_values <- replicate(B,
{
samp <- rgamma(500, shape = 2, rate = .5)
theta_1(samp)
}
)
theta_2_values <- replicate(B,
{
samp <- rgamma(500, shape = 2, rate = .5)
theta_2(samp)
}
)
bias_theta_1 <- abs(mean(theta_1_values) - sig^2)
bias_theta_2 <- abs(mean(theta_2_values) - sig^2)
bias_theta_1 #bias for theta_1
bias_theta_2 #bias for theta_2
date520526 = baseballr::scrape_statcast_savant(start_date = '2019-05-20',
end_date = '2019-05-26', player_type = 'batter')
#Install devtools to be able to install from github
#install.packages('devtools')
library(devtools)
#Bill Petti's Github Page for baseballr
#http://billpetti.github.io/baseballr/
install_github("BillPetti/baseballr")
library(baseballr)
library(tidyverse)
options(scipen = 999)
install.packages("tidyverse")
install.packages("tidyverse")
Sys.which("make")
install.packages("jsonlite", type = "source")
install.packages("jsonlite", type = "source")
install.packages("tidyverse")
library(baseballr)
library(tidyverse)
options(scipen = 999)
library(baseballr)
library(baseballr)
# load libraries
install_packages('dplyr')
# load libraries
install_packages('dplyr')
require('devtools')
install_github("BillPetti/baseballr")
require('baseballr')
library(baseballr)
library(tidyverse)
# load libraries
install.packages("tidyverse")
install.packages("tidyverse")
library(baseballr)
install.packages("dplyr")
library(tidyverse)
# load libraries
library(baseballr)
install.packages("baseballDBR")
# load libraries
library(baseballr)
install.packages("glue")
install.packages("glue")
# load libraries
library(baseballr)
# load libraries
require(devtools)
library(baseballr)
# load libraries
require(devtools)
install_github("BillPetti/baseballr")
# load libraries
install.packages("devtools")
library(baseballr)
# load libraries
require(devtools)
install_github("BillPetti/baseballr")
library(baseballr)
library(tidyverse)
# load libraries
library(baseballr)
# load libraries
library(baseballr)
library(tidyverse)
# Turns off scientific notation for easier reading
options(scipen = 999)
# Game Info
game_packs <- baseballr::get_game_pks_mlb(date = '2020-08-01', level_ids = 1)
game_info <- baseballr::get_game_info_sup_petti()
# Umpires
baseballr::get_umpire_ids_petti()
View(game_info)
# Batting Orders
batting_order_payload <- get_batting_orders(game_pk = 631475)
batting_order_payload
# Batting Orders
batting_order_payload <- get_batting_orders(game_pk = 632317)
batting_order_payload
# Game Info
game_packs <- baseballr::get_game_pks_mlb('2020-08-01', 1)
game_info <- baseballr::get_game_info_sup_petti()
# Umpires
baseballr::get_umpire_ids_petti()
# Batting Orders
batting_order_payload <- get_batting_orders(632317)
batting_order_payload
# Probable Pitchers
probables_payload <- get_probables_mlb(632317)
probables_payload
# Game Info
game_packs <- baseballr::get_game_pks_mlb('2020-08-01', 1)
game_info <- baseballr::get_game_info_sup_petti()
# Umpires
baseballr::get_umpire_ids_petti()
# Batting Orders
batting_order <- get_batting_orders(632317)
batting_order
# Probable Pitchers
probables <- get_probables_mlb(632317)
probables
# Game Info
game_packs <- get_game_pks_mlb('2020-08-01', 1)
game_info <- get_game_info_sup_petti()
# Umpires
baseballr::get_umpire_ids_petti()
# Batting Orders
batting_order <- get_batting_orders(632317)
batting_order
# Probable Pitchers
probables <- get_probables_mlb(632317)
probables
#Draft
draft <- get_draft_mlb()
#Draft
draft <- get_draft_mlb(2021)
draft
View(draft)
#Draft
draft <- get_draft_mlb(2021)
draft
View(draft)
mullins <- names(mullins)
View(batting_order)
install.packages("pacman")
p_load(Lahman, dplyr)
require(Lahman)
install.packages("Lahaman")
# Turns off scientific notation for easier reading
options(scipen = 999)
# Game Info
game_packs <- get_game_pks_mlb('2020-08-01', 1)
game_info <- get_game_info_sup_petti()
# Umpires
baseballr::get_umpire_ids_petti()
# Batting Orders
batting_order <- get_batting_orders(632317)
batting_order
# Probable Pitchers
probables <- get_probables_mlb(632317)
probables
#Draft
draft <- get_draft_mlb(2021)
draft
mullins <- baseballr::all
fangraph_ids <- c(13431, 17874)
# load libraries
library(baseballr)
library(tidyverse)
# Turns off scientific notation for easier reading
options(scipen = 999)
# Game Info
game_packs <- get_game_pks_mlb('2020-08-01', 1)
game_info <- get_game_info_sup_petti()
# Umpires
baseballr::get_umpire_ids_petti()
# Batting Orders
batting_order <- get_batting_orders(632317)
batting_order
# Probable Pitchers
probables <- get_probables_mlb(632317)
probables
#Draft
draft <- get_draft_mlb(2021)
draft
fangraph_ids <- c(13431, 17874)
years <- rep(2021,  times = length(fangraph_ids))
df <- tibble(playerid = fangraph_ids, year = years)
get_pitcher_logs_slowly <- function(playerid, year) {
Sys.sleep(2) # pauses for 2 seconds between requests
baseballr::pitcher_game_logs_fg(playerid, year)
}
df$logs <- pmap(df, get_pitcher_logs_slowly)
game_log_df <- df %>%
unnest(logs)
source("C:/Users/Chris/Desktop/baseball/savant.R", echo=TRUE)
View(get_pitcher_logs_slowly)
View(df)
View(df[[3]][[1]])
View(df[[3]][[2]])
fangraph_ids <- c(13431, 17874)
fangraph_ids
df <- tibble(playerid = fangraph_ids, year = years)
View(df)
fangraph_ids <- c(13431, 17874)
years <- rep(2021,  times = length(fangraph_ids))
df <- tibble(playerid = fangraph_ids, year = years)
pitcher_game_logs_fg <- function(playerid, year = 2017) {
message('Data courtey of FanGraphs.com. Please consider supporting FanGraphs by purchasing a membership: https://plus.fangraphs.com/product/fangraphs-membership/?switch-subscription=254671&item=85029&_wcsnonce=3e893e9b53&auto-switch=true')
url <- paste0("http://www.fangraphs.com/statsd-legacy.aspx?playerid=",
playerid,
"&season=",
year, "&position=P")
payload <- (xml2::read_html(url) %>%
rvest::html_element(".rgMasterTable")) %>%
rvest::html_table(fill = TRUE) %>%
tibble::as_tibble(.name_repair = "universal")
payload <- payload %>%
dplyr::filter(!grepl("Date|Total", .data$Date))
if (nrow(payload) > 1) {
suppressWarnings(
payload <- payload %>%
dplyr::mutate(
K.9 = as.numeric(.data$K.9),
BB.9 = as.numeric(.data$BB.9),
HR.9 = as.numeric(.data$HR.9),
LOB. = as.numeric(gsub("[\\%,]", "", .data$LOB.)),
GB. = as.numeric(gsub("[\\%,]", "", .data$GB.)),
HR.FB = as.numeric(gsub("[\\%,]", "", .data$HR.FB))) %>%
dplyr::rename(
K_9 = .data$K.9,
BB_9 = .data$BB.9,
HR_9 = .data$HR.9,
LOB_perc = .data$LOB.,
GB_perc = .data$GB.,
HR_FB = .data$HR.FB)
)
} else {
suppressWarnings(
payload <- lapply(payload, function(x) (as.numeric(gsub("[\\%,]", "", x)))) %>%
dplyr::bind_rows()
)
}
payload$LOB_perc <- as.numeric(payload$LOB_perc)/100
payload$GB_perc <- as.numeric(payload$GB_perc)/100
return(payload)
}
df$logs <- pmap(df, get_pitcher_logs_slowly)
game_log_df <- df %>%
unnest(logs)
View(df)
View(df[[3]][[1]])
fangraph_ids <- c(13431, 17874)
years <- rep(2021,  times = length(fangraph_ids))
df <- tibble(playerid = fangraph_ids, year = years)
pitcher_game_logs_fg <- function(playerid, year = 2021) {
url <- paste0("http://www.fangraphs.com/statsd-legacy.aspx?playerid=",
playerid,
"&season=",
year, "&position=P")
payload <- (xml2::read_html(url) %>%
rvest::html_element(".rgMasterTable")) %>%
rvest::html_table(fill = TRUE) %>%
tibble::as_tibble(.name_repair = "universal")
payload <- payload %>%
dplyr::filter(!grepl("Date|Total", .data$Date))
if (nrow(payload) > 1) {
suppressWarnings(
payload <- payload %>%
dplyr::mutate(
K.9 = as.numeric(.data$K.9),
BB.9 = as.numeric(.data$BB.9),
HR.9 = as.numeric(.data$HR.9),
LOB. = as.numeric(gsub("[\\%,]", "", .data$LOB.)),
GB. = as.numeric(gsub("[\\%,]", "", .data$GB.)),
HR.FB = as.numeric(gsub("[\\%,]", "", .data$HR.FB))) %>%
dplyr::rename(
K_9 = .data$K.9,
BB_9 = .data$BB.9,
HR_9 = .data$HR.9,
LOB_perc = .data$LOB.,
GB_perc = .data$GB.,
HR_FB = .data$HR.FB)
)
} else {
suppressWarnings(
payload <- lapply(payload, function(x) (as.numeric(gsub("[\\%,]", "", x)))) %>%
dplyr::bind_rows()
)
}
payload$LOB_perc <- as.numeric(payload$LOB_perc)/100
payload$GB_perc <- as.numeric(payload$GB_perc)/100
return(payload)
}
df$logs <- pmap(df, get_pitcher_logs_slowly)
game_log_df <- df %>%
unnest(logs)
View(df)
View(df[[3]][[1]])
fangraph_ids <- c(13431)
years <- rep(2021)
df <- tibble(playerid = fangraph_ids, year = years)
pitcher_game_logs_fg <- function(playerid, year = 2021) {
url <- paste0("http://www.fangraphs.com/statsd-legacy.aspx?playerid=",
playerid,
"&season=",
year, "&position=P")
payload <- (xml2::read_html(url) %>%
rvest::html_element(".rgMasterTable")) %>%
rvest::html_table(fill = TRUE) %>%
tibble::as_tibble(.name_repair = "universal")
payload <- payload %>%
dplyr::filter(!grepl("Date|Total", .data$Date))
if (nrow(payload) > 1) {
suppressWarnings(
payload <- payload %>%
dplyr::mutate(
K.9 = as.numeric(.data$K.9),
BB.9 = as.numeric(.data$BB.9),
HR.9 = as.numeric(.data$HR.9),
LOB. = as.numeric(gsub("[\\%,]", "", .data$LOB.)),
GB. = as.numeric(gsub("[\\%,]", "", .data$GB.)),
HR.FB = as.numeric(gsub("[\\%,]", "", .data$HR.FB))) %>%
dplyr::rename(
K_9 = .data$K.9,
BB_9 = .data$BB.9,
HR_9 = .data$HR.9,
LOB_perc = .data$LOB.,
GB_perc = .data$GB.,
HR_FB = .data$HR.FB)
)
} else {
suppressWarnings(
payload <- lapply(payload, function(x) (as.numeric(gsub("[\\%,]", "", x)))) %>%
dplyr::bind_rows()
)
}
payload$LOB_perc <- as.numeric(payload$LOB_perc)/100
payload$GB_perc <- as.numeric(payload$GB_perc)/100
return(payload)
}
df$logs <- pmap(df, get_pitcher_logs_slowly)
game_log_df <- df %>%
unnest(logs)
View(df)
View(df[[3]][[1]])
shiny::runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
shiny::runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
shiny::runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
bullpen_session = read.csv("www/bullpen-session.csv", header = TRUE)
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
shiny::runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp()
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
shiny::runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
shiny::runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/shiny/Test')
shiny::runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/herqab')
runApp('C:/Users/Chris/iCloudDrive/baseball-scripts/herqab')
setwd("C:/Users/Chris/iCloudDrive/baseball-scripts/herqab")
runApp()
runApp()
library(here)
library(here)
install.packages(here)
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
